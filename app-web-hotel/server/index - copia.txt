const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 5000;

// Configuración de CORS
app.use(cors());
app.use(bodyParser.json());

// Conexión a MongoDB Atlas
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('Conexión exitosa a MongoDB Atlas'))
    .catch(err => console.error('Error de conexión a MongoDB Atlas:', err));

// Importación de modelos
const Cliente = require('./models/Cliente');
const Admin = require('./models/Admin');

// Rutas
const enviarCorreoRoutes = require('./routes/enviarCorreo');
app.use('/api/enviar-correo', enviarCorreoRoutes);
// Ruta para enviar correo
app.post('/api/enviar-correo', async (req, res) => {
    try {
        const { email, uniqueCode, driveLink, emailTemplate } = req.body;

        const emailToSend = emailTemplate.replace('[enlace.com]', driveLink).replace('[xxxxxxxx]', uniqueCode);

        const transporter = nodemailer.createTransport({
            host: 'mail.guachipelin.com',
            port: 587,
            secure: false,
            auth: {
                user: 'yourpics@guachipelin.com',
                pass: process.env.EMAIL_PASSWORD,
            },
        });

        const mailOptions = {
            from: 'yourpics@guachipelin.com',
            to: email,
            subject: 'Tus fotos del Hotel Hacienda Guachipelin',
            html: emailToSend,
        };

        await transporter.sendMail(mailOptions);

        // Guardar el cliente en la base de datos (puedes adaptar esto según tu modelo)
        const nuevoCliente = new Cliente({ email, driveLink, uniqueCode });
        await nuevoCliente.save();

        res.json({ message: 'Correo enviado y cliente guardado correctamente' });
    } catch (error) {
        console.error('Error al enviar el correo o guardar el cliente:', error);
        res.status(500).json({ error: 'Error al enviar el correo o guardar el cliente' });
    }
});

// Otras rutas (clientes, login, etc.)
app.use('/routes/clientes', clienteRoutes);
// ... (otras rutas que puedas tener)

// Middleware para manejo de errores
app.use((err, req, res, next) => {
    console.error('Error en el servidor:', err.stack);
    res.status(500).json({ error: 'Algo salió mal en el servidor' });
});

// Sirve archivos estáticos de la carpeta 'build' en producción
if (process.env.NODE_ENV === 'production') {
    app.use(express.static(path.join(__dirname, '../client/build')));
    app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, '../client/build', 'index.html'));
    });
}

app.listen(port, () => {
    console.log(`Servidor corriendo en http://localhost:${port}`);
});
